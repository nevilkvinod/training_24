
my2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00802800  00000206  0000029a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  000041f2  000001f2  00000286  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000030  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000241b  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000021c5  00000000  00000000  00002767  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000026c  00000000  00000000  0000492c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  00004b98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001025  00000000  00000000  00004c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000008e  00000000  00000000  00005c25  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00005cb3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  8c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_copy_data>:
  9c:	18 e2       	ldi	r17, 0x28	; 40
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b8 e2       	ldi	r27, 0x28	; 40
  a2:	e6 e0       	ldi	r30, 0x06	; 6
  a4:	f2 e0       	ldi	r31, 0x02	; 2
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
  a8:	05 90       	lpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>
  b2:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <main>
  b6:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <maxmin>:
 * Created: 31-07-2024 12:06:13
 *  Author: ADITHYA ANIL
 */ 
extern int max_min;
int maxmin(int m[])
{
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
  c6:	2a 97       	sbiw	r28, 0x0a	; 10
  c8:	cd bf       	out	0x3d, r28	; 61
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	89 87       	std	Y+9, r24	; 0x09
  ce:	9a 87       	std	Y+10, r25	; 0x0a
	if (max_min== 1)
  d0:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
  d4:	90 91 01 28 	lds	r25, 0x2801	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	99 f5       	brne	.+102    	; 0x142 <__EEPROM_REGION_LENGTH__+0x42>
	{
		int i;
		int max=m[0];
  dc:	89 85       	ldd	r24, Y+9	; 0x09
  de:	9a 85       	ldd	r25, Y+10	; 0x0a
  e0:	fc 01       	movw	r30, r24
  e2:	80 81       	ld	r24, Z
  e4:	91 81       	ldd	r25, Z+1	; 0x01
  e6:	8b 83       	std	Y+3, r24	; 0x03
  e8:	9c 83       	std	Y+4, r25	; 0x04
		for(i=0;i<10;i++){
  ea:	19 82       	std	Y+1, r1	; 0x01
  ec:	1a 82       	std	Y+2, r1	; 0x02
  ee:	22 c0       	rjmp	.+68     	; 0x134 <__EEPROM_REGION_LENGTH__+0x34>
			if (m[i]>max)
  f0:	89 81       	ldd	r24, Y+1	; 0x01
  f2:	9a 81       	ldd	r25, Y+2	; 0x02
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	29 85       	ldd	r18, Y+9	; 0x09
  fa:	3a 85       	ldd	r19, Y+10	; 0x0a
  fc:	82 0f       	add	r24, r18
  fe:	93 1f       	adc	r25, r19
 100:	fc 01       	movw	r30, r24
 102:	20 81       	ld	r18, Z
 104:	31 81       	ldd	r19, Z+1	; 0x01
 106:	8b 81       	ldd	r24, Y+3	; 0x03
 108:	9c 81       	ldd	r25, Y+4	; 0x04
 10a:	82 17       	cp	r24, r18
 10c:	93 07       	cpc	r25, r19
 10e:	6c f4       	brge	.+26     	; 0x12a <__EEPROM_REGION_LENGTH__+0x2a>
			max=m[i];
 110:	89 81       	ldd	r24, Y+1	; 0x01
 112:	9a 81       	ldd	r25, Y+2	; 0x02
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	29 85       	ldd	r18, Y+9	; 0x09
 11a:	3a 85       	ldd	r19, Y+10	; 0x0a
 11c:	82 0f       	add	r24, r18
 11e:	93 1f       	adc	r25, r19
 120:	fc 01       	movw	r30, r24
 122:	80 81       	ld	r24, Z
 124:	91 81       	ldd	r25, Z+1	; 0x01
 126:	8b 83       	std	Y+3, r24	; 0x03
 128:	9c 83       	std	Y+4, r25	; 0x04
{
	if (max_min== 1)
	{
		int i;
		int max=m[0];
		for(i=0;i<10;i++){
 12a:	89 81       	ldd	r24, Y+1	; 0x01
 12c:	9a 81       	ldd	r25, Y+2	; 0x02
 12e:	01 96       	adiw	r24, 0x01	; 1
 130:	89 83       	std	Y+1, r24	; 0x01
 132:	9a 83       	std	Y+2, r25	; 0x02
 134:	89 81       	ldd	r24, Y+1	; 0x01
 136:	9a 81       	ldd	r25, Y+2	; 0x02
 138:	0a 97       	sbiw	r24, 0x0a	; 10
 13a:	d4 f2       	brlt	.-76     	; 0xf0 <maxmin+0x32>
			if (m[i]>max)
			max=m[i];
		}
		return max;
 13c:	8b 81       	ldd	r24, Y+3	; 0x03
 13e:	9c 81       	ldd	r25, Y+4	; 0x04
 140:	32 c0       	rjmp	.+100    	; 0x1a6 <__EEPROM_REGION_LENGTH__+0xa6>
	}
	else
	{
		int i;
		int min=m[0];
 142:	89 85       	ldd	r24, Y+9	; 0x09
 144:	9a 85       	ldd	r25, Y+10	; 0x0a
 146:	fc 01       	movw	r30, r24
 148:	80 81       	ld	r24, Z
 14a:	91 81       	ldd	r25, Z+1	; 0x01
 14c:	8f 83       	std	Y+7, r24	; 0x07
 14e:	98 87       	std	Y+8, r25	; 0x08
		for(i=0;i<10;i++){
 150:	1d 82       	std	Y+5, r1	; 0x05
 152:	1e 82       	std	Y+6, r1	; 0x06
 154:	22 c0       	rjmp	.+68     	; 0x19a <__EEPROM_REGION_LENGTH__+0x9a>
			if (m[i]<min)
 156:	8d 81       	ldd	r24, Y+5	; 0x05
 158:	9e 81       	ldd	r25, Y+6	; 0x06
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	29 85       	ldd	r18, Y+9	; 0x09
 160:	3a 85       	ldd	r19, Y+10	; 0x0a
 162:	82 0f       	add	r24, r18
 164:	93 1f       	adc	r25, r19
 166:	fc 01       	movw	r30, r24
 168:	20 81       	ld	r18, Z
 16a:	31 81       	ldd	r19, Z+1	; 0x01
 16c:	8f 81       	ldd	r24, Y+7	; 0x07
 16e:	98 85       	ldd	r25, Y+8	; 0x08
 170:	28 17       	cp	r18, r24
 172:	39 07       	cpc	r19, r25
 174:	6c f4       	brge	.+26     	; 0x190 <__EEPROM_REGION_LENGTH__+0x90>
			min=m[i];
 176:	8d 81       	ldd	r24, Y+5	; 0x05
 178:	9e 81       	ldd	r25, Y+6	; 0x06
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	29 85       	ldd	r18, Y+9	; 0x09
 180:	3a 85       	ldd	r19, Y+10	; 0x0a
 182:	82 0f       	add	r24, r18
 184:	93 1f       	adc	r25, r19
 186:	fc 01       	movw	r30, r24
 188:	80 81       	ld	r24, Z
 18a:	91 81       	ldd	r25, Z+1	; 0x01
 18c:	8f 83       	std	Y+7, r24	; 0x07
 18e:	98 87       	std	Y+8, r25	; 0x08
	}
	else
	{
		int i;
		int min=m[0];
		for(i=0;i<10;i++){
 190:	8d 81       	ldd	r24, Y+5	; 0x05
 192:	9e 81       	ldd	r25, Y+6	; 0x06
 194:	01 96       	adiw	r24, 0x01	; 1
 196:	8d 83       	std	Y+5, r24	; 0x05
 198:	9e 83       	std	Y+6, r25	; 0x06
 19a:	8d 81       	ldd	r24, Y+5	; 0x05
 19c:	9e 81       	ldd	r25, Y+6	; 0x06
 19e:	0a 97       	sbiw	r24, 0x0a	; 10
 1a0:	d4 f2       	brlt	.-76     	; 0x156 <__EEPROM_REGION_LENGTH__+0x56>
			if (m[i]<min)
			min=m[i];
		}
		return min;
 1a2:	8f 81       	ldd	r24, Y+7	; 0x07
 1a4:	98 85       	ldd	r25, Y+8	; 0x08
	}
 1a6:	2a 96       	adiw	r28, 0x0a	; 10
 1a8:	cd bf       	out	0x3d, r28	; 61
 1aa:	de bf       	out	0x3e, r29	; 62
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <main>:

#include <avr/io.h>
int maxmin(int m[]);
int max_min = 1;
int main(void)
{  
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	cd b7       	in	r28, 0x3d	; 61
 1b8:	de b7       	in	r29, 0x3e	; 62
 1ba:	66 97       	sbiw	r28, 0x16	; 22
 1bc:	cd bf       	out	0x3d, r28	; 61
 1be:	de bf       	out	0x3e, r29	; 62
  
   
   int val;
   int p[]={10,20,5,4,-10,47,8,36,-6,11};
 1c0:	84 e1       	ldi	r24, 0x14	; 20
 1c2:	e2 ef       	ldi	r30, 0xF2	; 242
 1c4:	f1 e4       	ldi	r31, 0x41	; 65
 1c6:	de 01       	movw	r26, r28
 1c8:	13 96       	adiw	r26, 0x03	; 3
 1ca:	01 90       	ld	r0, Z+
 1cc:	0d 92       	st	X+, r0
 1ce:	8a 95       	dec	r24
 1d0:	e1 f7       	brne	.-8      	; 0x1ca <main+0x18>
  
   val = maxmin(p);
 1d2:	ce 01       	movw	r24, r28
 1d4:	03 96       	adiw	r24, 0x03	; 3
 1d6:	0e 94 5f 00 	call	0xbe	; 0xbe <maxmin>
 1da:	89 83       	std	Y+1, r24	; 0x01
 1dc:	9a 83       	std	Y+2, r25	; 0x02
   
   return 0;
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	90 e0       	ldi	r25, 0x00	; 0
}
 1e2:	66 96       	adiw	r28, 0x16	; 22
 1e4:	cd bf       	out	0x3d, r28	; 61
 1e6:	de bf       	out	0x3e, r29	; 62
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	08 95       	ret

000001ee <_exit>:
 1ee:	f8 94       	cli

000001f0 <__stop_program>:
 1f0:	ff cf       	rjmp	.-2      	; 0x1f0 <__stop_program>
