
swap.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000136  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006f0  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000638  00000000  00000000  00000914  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001bf  00000000  00000000  00000f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  0000110c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035c  00000000  00000000  00001160  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008f  00000000  00000000  000014bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000154b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6d 00 	call	0xda	; 0xda <main>
  78:	0c 94 99 00 	jmp	0x132	; 0x132 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <fun>:
 */ 

#include <avr/io.h>


void fun(int *ptr1,int *ptr2){
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	00 d0       	rcall	.+0      	; 0x86 <fun+0x6>
  86:	00 d0       	rcall	.+0      	; 0x88 <fun+0x8>
  88:	00 d0       	rcall	.+0      	; 0x8a <fun+0xa>
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
  8e:	9c 83       	std	Y+4, r25	; 0x04
  90:	8b 83       	std	Y+3, r24	; 0x03
  92:	7e 83       	std	Y+6, r23	; 0x06
  94:	6d 83       	std	Y+5, r22	; 0x05
	int temp;
	temp = *ptr1;
  96:	8b 81       	ldd	r24, Y+3	; 0x03
  98:	9c 81       	ldd	r25, Y+4	; 0x04
  9a:	fc 01       	movw	r30, r24
  9c:	80 81       	ld	r24, Z
  9e:	91 81       	ldd	r25, Z+1	; 0x01
  a0:	9a 83       	std	Y+2, r25	; 0x02
  a2:	89 83       	std	Y+1, r24	; 0x01
	*ptr1 = *ptr2;
  a4:	8d 81       	ldd	r24, Y+5	; 0x05
  a6:	9e 81       	ldd	r25, Y+6	; 0x06
  a8:	fc 01       	movw	r30, r24
  aa:	20 81       	ld	r18, Z
  ac:	31 81       	ldd	r19, Z+1	; 0x01
  ae:	8b 81       	ldd	r24, Y+3	; 0x03
  b0:	9c 81       	ldd	r25, Y+4	; 0x04
  b2:	fc 01       	movw	r30, r24
  b4:	31 83       	std	Z+1, r19	; 0x01
  b6:	20 83       	st	Z, r18
	*ptr2 = temp;
  b8:	8d 81       	ldd	r24, Y+5	; 0x05
  ba:	9e 81       	ldd	r25, Y+6	; 0x06
  bc:	29 81       	ldd	r18, Y+1	; 0x01
  be:	3a 81       	ldd	r19, Y+2	; 0x02
  c0:	fc 01       	movw	r30, r24
  c2:	31 83       	std	Z+1, r19	; 0x01
  c4:	20 83       	st	Z, r18
}
  c6:	00 00       	nop
  c8:	26 96       	adiw	r28, 0x06	; 6
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	f8 94       	cli
  ce:	de bf       	out	0x3e, r29	; 62
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	cd bf       	out	0x3d, r28	; 61
  d4:	df 91       	pop	r29
  d6:	cf 91       	pop	r28
  d8:	08 95       	ret

000000da <main>:

int main(void)
{
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	cd b7       	in	r28, 0x3d	; 61
  e0:	de b7       	in	r29, 0x3e	; 62
  e2:	28 97       	sbiw	r28, 0x08	; 8
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	f8 94       	cli
  e8:	de bf       	out	0x3e, r29	; 62
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	cd bf       	out	0x3d, r28	; 61
	int a = 2;
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	9e 83       	std	Y+6, r25	; 0x06
  f4:	8d 83       	std	Y+5, r24	; 0x05
	int b = 4;
  f6:	84 e0       	ldi	r24, 0x04	; 4
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	98 87       	std	Y+8, r25	; 0x08
  fc:	8f 83       	std	Y+7, r24	; 0x07
	
	int* ptr1 = &a;
  fe:	ce 01       	movw	r24, r28
 100:	05 96       	adiw	r24, 0x05	; 5
 102:	9a 83       	std	Y+2, r25	; 0x02
 104:	89 83       	std	Y+1, r24	; 0x01
	int* ptr2 = &b;
 106:	ce 01       	movw	r24, r28
 108:	07 96       	adiw	r24, 0x07	; 7
 10a:	9c 83       	std	Y+4, r25	; 0x04
 10c:	8b 83       	std	Y+3, r24	; 0x03
	
	fun(ptr1, ptr2);
 10e:	2b 81       	ldd	r18, Y+3	; 0x03
 110:	3c 81       	ldd	r19, Y+4	; 0x04
 112:	89 81       	ldd	r24, Y+1	; 0x01
 114:	9a 81       	ldd	r25, Y+2	; 0x02
 116:	b9 01       	movw	r22, r18
 118:	0e 94 40 00 	call	0x80	; 0x80 <fun>
	
	return 0;
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	90 e0       	ldi	r25, 0x00	; 0
}
 120:	28 96       	adiw	r28, 0x08	; 8
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	f8 94       	cli
 126:	de bf       	out	0x3e, r29	; 62
 128:	0f be       	out	0x3f, r0	; 63
 12a:	cd bf       	out	0x3d, r28	; 61
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
