
modefind.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  000002b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000206  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000016  00004206  00000206  0000029a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000002  00802800  00802800  000002b0  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000040  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000243d  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000021f0  00000000  00000000  0000279d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000270  00000000  00000000  0000498d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000068  00000000  00000000  00004c00  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001092  00000000  00000000  00004c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000008e  00000000  00000000  00005cfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000020  00000000  00000000  00005d88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  6c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  70:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  74:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  78:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  7c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  80:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  84:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  88:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  8c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_clear_bss>:
  9c:	28 e2       	ldi	r18, 0x28	; 40
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b8 e2       	ldi	r27, 0x28	; 40
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
  a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
  a6:	a2 30       	cpi	r26, 0x02	; 2
  a8:	b2 07       	cpc	r27, r18
  aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
  ac:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  b0:	0c 94 01 01 	jmp	0x202	; 0x202 <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <main>:
#include <avr/io.h>
int mode;
int mode_find(int *,int);

int main(void)
{
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	6a 97       	sbiw	r28, 0x1a	; 26
  c2:	cd bf       	out	0x3d, r28	; 61
  c4:	de bf       	out	0x3e, r29	; 62
    /* Replace with your application code */
    int arr[11]={1,1,2,2,3,4,3,3,5,3,6};
  c6:	86 e1       	ldi	r24, 0x16	; 22
  c8:	e6 e0       	ldi	r30, 0x06	; 6
  ca:	f2 e4       	ldi	r31, 0x42	; 66
  cc:	de 01       	movw	r26, r28
  ce:	15 96       	adiw	r26, 0x05	; 5
  d0:	01 90       	ld	r0, Z+
  d2:	0d 92       	st	X+, r0
  d4:	8a 95       	dec	r24
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x18>
	int *ptr=arr;
  d8:	ce 01       	movw	r24, r28
  da:	05 96       	adiw	r24, 0x05	; 5
  dc:	89 83       	std	Y+1, r24	; 0x01
  de:	9a 83       	std	Y+2, r25	; 0x02
	int length = sizeof(arr)/sizeof(arr[0]);
  e0:	8b e0       	ldi	r24, 0x0B	; 11
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	8b 83       	std	Y+3, r24	; 0x03
  e6:	9c 83       	std	Y+4, r25	; 0x04
	mode=mode_find(ptr,length);
  e8:	2b 81       	ldd	r18, Y+3	; 0x03
  ea:	3c 81       	ldd	r19, Y+4	; 0x04
  ec:	89 81       	ldd	r24, Y+1	; 0x01
  ee:	9a 81       	ldd	r25, Y+2	; 0x02
  f0:	b9 01       	movw	r22, r18
  f2:	0e 94 87 00 	call	0x10e	; 0x10e <mode_find>
  f6:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
  fa:	90 93 01 28 	sts	0x2801, r25	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	90 e0       	ldi	r25, 0x00	; 0
}
 102:	6a 96       	adiw	r28, 0x1a	; 26
 104:	cd bf       	out	0x3d, r28	; 61
 106:	de bf       	out	0x3e, r29	; 62
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	08 95       	ret

0000010e <mode_find>:
 *
 * Created: 03-08-2024 10:37:00
 *  Author: Siyan Ananth A
 */ 
extern mode;
int mode_find(int *arr,int length){
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	cd b7       	in	r28, 0x3d	; 61
 114:	de b7       	in	r29, 0x3e	; 62
 116:	2c 97       	sbiw	r28, 0x0c	; 12
 118:	cd bf       	out	0x3d, r28	; 61
 11a:	de bf       	out	0x3e, r29	; 62
 11c:	89 87       	std	Y+9, r24	; 0x09
 11e:	9a 87       	std	Y+10, r25	; 0x0a
 120:	6b 87       	std	Y+11, r22	; 0x0b
 122:	7c 87       	std	Y+12, r23	; 0x0c
	int count=0,temp=count;
 124:	19 82       	std	Y+1, r1	; 0x01
 126:	1a 82       	std	Y+2, r1	; 0x02
 128:	89 81       	ldd	r24, Y+1	; 0x01
 12a:	9a 81       	ldd	r25, Y+2	; 0x02
 12c:	8b 83       	std	Y+3, r24	; 0x03
 12e:	9c 83       	std	Y+4, r25	; 0x04
	for(int i=0;i<length;i++){
 130:	1d 82       	std	Y+5, r1	; 0x05
 132:	1e 82       	std	Y+6, r1	; 0x06
 134:	54 c0       	rjmp	.+168    	; 0x1de <mode_find+0xd0>
		for(int j=i;j<length-1;j++){
 136:	8d 81       	ldd	r24, Y+5	; 0x05
 138:	9e 81       	ldd	r25, Y+6	; 0x06
 13a:	8f 83       	std	Y+7, r24	; 0x07
 13c:	98 87       	std	Y+8, r25	; 0x08
 13e:	24 c0       	rjmp	.+72     	; 0x188 <mode_find+0x7a>
			if(arr[i]==arr[j+1]){
 140:	8d 81       	ldd	r24, Y+5	; 0x05
 142:	9e 81       	ldd	r25, Y+6	; 0x06
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	29 85       	ldd	r18, Y+9	; 0x09
 14a:	3a 85       	ldd	r19, Y+10	; 0x0a
 14c:	82 0f       	add	r24, r18
 14e:	93 1f       	adc	r25, r19
 150:	fc 01       	movw	r30, r24
 152:	20 81       	ld	r18, Z
 154:	31 81       	ldd	r19, Z+1	; 0x01
 156:	8f 81       	ldd	r24, Y+7	; 0x07
 158:	98 85       	ldd	r25, Y+8	; 0x08
 15a:	01 96       	adiw	r24, 0x01	; 1
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	49 85       	ldd	r20, Y+9	; 0x09
 162:	5a 85       	ldd	r21, Y+10	; 0x0a
 164:	84 0f       	add	r24, r20
 166:	95 1f       	adc	r25, r21
 168:	fc 01       	movw	r30, r24
 16a:	80 81       	ld	r24, Z
 16c:	91 81       	ldd	r25, Z+1	; 0x01
 16e:	28 17       	cp	r18, r24
 170:	39 07       	cpc	r19, r25
 172:	29 f4       	brne	.+10     	; 0x17e <mode_find+0x70>
				count+=1;	
 174:	89 81       	ldd	r24, Y+1	; 0x01
 176:	9a 81       	ldd	r25, Y+2	; 0x02
 178:	01 96       	adiw	r24, 0x01	; 1
 17a:	89 83       	std	Y+1, r24	; 0x01
 17c:	9a 83       	std	Y+2, r25	; 0x02
 */ 
extern mode;
int mode_find(int *arr,int length){
	int count=0,temp=count;
	for(int i=0;i<length;i++){
		for(int j=i;j<length-1;j++){
 17e:	8f 81       	ldd	r24, Y+7	; 0x07
 180:	98 85       	ldd	r25, Y+8	; 0x08
 182:	01 96       	adiw	r24, 0x01	; 1
 184:	8f 83       	std	Y+7, r24	; 0x07
 186:	98 87       	std	Y+8, r25	; 0x08
 188:	8b 85       	ldd	r24, Y+11	; 0x0b
 18a:	9c 85       	ldd	r25, Y+12	; 0x0c
 18c:	9c 01       	movw	r18, r24
 18e:	21 50       	subi	r18, 0x01	; 1
 190:	31 09       	sbc	r19, r1
 192:	8f 81       	ldd	r24, Y+7	; 0x07
 194:	98 85       	ldd	r25, Y+8	; 0x08
 196:	82 17       	cp	r24, r18
 198:	93 07       	cpc	r25, r19
 19a:	94 f2       	brlt	.-92     	; 0x140 <mode_find+0x32>
			if(arr[i]==arr[j+1]){
				count+=1;	
			}
		}
		
		if(count>temp){
 19c:	29 81       	ldd	r18, Y+1	; 0x01
 19e:	3a 81       	ldd	r19, Y+2	; 0x02
 1a0:	8b 81       	ldd	r24, Y+3	; 0x03
 1a2:	9c 81       	ldd	r25, Y+4	; 0x04
 1a4:	82 17       	cp	r24, r18
 1a6:	93 07       	cpc	r25, r19
 1a8:	ac f4       	brge	.+42     	; 0x1d4 <mode_find+0xc6>
			mode=arr[i];
 1aa:	8d 81       	ldd	r24, Y+5	; 0x05
 1ac:	9e 81       	ldd	r25, Y+6	; 0x06
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	29 85       	ldd	r18, Y+9	; 0x09
 1b4:	3a 85       	ldd	r19, Y+10	; 0x0a
 1b6:	82 0f       	add	r24, r18
 1b8:	93 1f       	adc	r25, r19
 1ba:	fc 01       	movw	r30, r24
 1bc:	80 81       	ld	r24, Z
 1be:	91 81       	ldd	r25, Z+1	; 0x01
 1c0:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
 1c4:	90 93 01 28 	sts	0x2801, r25	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
			temp=count;
 1c8:	89 81       	ldd	r24, Y+1	; 0x01
 1ca:	9a 81       	ldd	r25, Y+2	; 0x02
 1cc:	8b 83       	std	Y+3, r24	; 0x03
 1ce:	9c 83       	std	Y+4, r25	; 0x04
			count=0;
 1d0:	19 82       	std	Y+1, r1	; 0x01
 1d2:	1a 82       	std	Y+2, r1	; 0x02
 *  Author: Siyan Ananth A
 */ 
extern mode;
int mode_find(int *arr,int length){
	int count=0,temp=count;
	for(int i=0;i<length;i++){
 1d4:	8d 81       	ldd	r24, Y+5	; 0x05
 1d6:	9e 81       	ldd	r25, Y+6	; 0x06
 1d8:	01 96       	adiw	r24, 0x01	; 1
 1da:	8d 83       	std	Y+5, r24	; 0x05
 1dc:	9e 83       	std	Y+6, r25	; 0x06
 1de:	2d 81       	ldd	r18, Y+5	; 0x05
 1e0:	3e 81       	ldd	r19, Y+6	; 0x06
 1e2:	8b 85       	ldd	r24, Y+11	; 0x0b
 1e4:	9c 85       	ldd	r25, Y+12	; 0x0c
 1e6:	28 17       	cp	r18, r24
 1e8:	39 07       	cpc	r19, r25
 1ea:	0c f4       	brge	.+2      	; 0x1ee <mode_find+0xe0>
 1ec:	a4 cf       	rjmp	.-184    	; 0x136 <mode_find+0x28>
			mode=arr[i];
			temp=count;
			count=0;
		}
	}
	return mode;
 1ee:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
 1f2:	90 91 01 28 	lds	r25, 0x2801	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
}
 1f6:	2c 96       	adiw	r28, 0x0c	; 12
 1f8:	cd bf       	out	0x3d, r28	; 61
 1fa:	de bf       	out	0x3e, r29	; 62
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	08 95       	ret

00000202 <_exit>:
 202:	f8 94       	cli

00000204 <__stop_program>:
 204:	ff cf       	rjmp	.-2      	; 0x204 <__stop_program>
