
q4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  0000032e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000028e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  0000428e  0000028e  00000322  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000002  00802800  00802800  0000032e  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  0000032e  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000360  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000040  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000023ec  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000021ba  00000000  00000000  000027cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000227  00000000  00000000  00004986  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000068  00000000  00000000  00004bb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000102a  00000000  00000000  00004c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000008f  00000000  00000000  00005c42  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000020  00000000  00000000  00005cd1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  6c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  70:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  74:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  78:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  7c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  80:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  84:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  88:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  8c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_clear_bss>:
  9c:	28 e2       	ldi	r18, 0x28	; 40
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b8 e2       	ldi	r27, 0x28	; 40
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
  a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
  a6:	a2 30       	cpi	r26, 0x02	; 2
  a8:	b2 07       	cpc	r27, r18
  aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
  ac:	0e 94 28 01 	call	0x250	; 0x250 <main>
  b0:	0c 94 45 01 	jmp	0x28a	; 0x28a <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <vowel>:

/*Write a function that takes an array of characters as input and returns nothing. However, function must update an external variable vowel_count to reflect the total number of vowels in the string.*/ 
#include<string.h>
extern int vowel_count=0;
void vowel(char* str)
{
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	26 97       	sbiw	r28, 0x06	; 6
  c2:	cd bf       	out	0x3d, r28	; 61
  c4:	de bf       	out	0x3e, r29	; 62
  c6:	8d 83       	std	Y+5, r24	; 0x05
  c8:	9e 83       	std	Y+6, r25	; 0x06
	int l;
	l=strlen(str);
  ca:	8d 81       	ldd	r24, Y+5	; 0x05
  cc:	9e 81       	ldd	r25, Y+6	; 0x06
  ce:	0e 94 3c 01 	call	0x278	; 0x278 <strlen>
  d2:	8b 83       	std	Y+3, r24	; 0x03
  d4:	9c 83       	std	Y+4, r25	; 0x04
	for(int i=0;i<l;i++)
  d6:	19 82       	std	Y+1, r1	; 0x01
  d8:	1a 82       	std	Y+2, r1	; 0x02
  da:	ab c0       	rjmp	.+342    	; 0x232 <__EEPROM_REGION_LENGTH__+0x132>
	{
		if(str[i] == 'a' | str[i]=='e' | str[i]=='i' | str[i]=='o' | str[i]=='u' | str[i]=='A' | str[i]=='E' | str[i]=='I' | str[i]=='O' | str[i]=='U' )
  dc:	89 81       	ldd	r24, Y+1	; 0x01
  de:	9a 81       	ldd	r25, Y+2	; 0x02
  e0:	2d 81       	ldd	r18, Y+5	; 0x05
  e2:	3e 81       	ldd	r19, Y+6	; 0x06
  e4:	82 0f       	add	r24, r18
  e6:	93 1f       	adc	r25, r19
  e8:	fc 01       	movw	r30, r24
  ea:	80 81       	ld	r24, Z
  ec:	41 e0       	ldi	r20, 0x01	; 1
  ee:	81 36       	cpi	r24, 0x61	; 97
  f0:	09 f0       	breq	.+2      	; 0xf4 <vowel+0x3c>
  f2:	40 e0       	ldi	r20, 0x00	; 0
  f4:	89 81       	ldd	r24, Y+1	; 0x01
  f6:	9a 81       	ldd	r25, Y+2	; 0x02
  f8:	2d 81       	ldd	r18, Y+5	; 0x05
  fa:	3e 81       	ldd	r19, Y+6	; 0x06
  fc:	82 0f       	add	r24, r18
  fe:	93 1f       	adc	r25, r19
 100:	fc 01       	movw	r30, r24
 102:	90 81       	ld	r25, Z
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	95 36       	cpi	r25, 0x65	; 101
 108:	09 f0       	breq	.+2      	; 0x10c <__EEPROM_REGION_LENGTH__+0xc>
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	84 2b       	or	r24, r20
 10e:	28 2f       	mov	r18, r24
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	89 81       	ldd	r24, Y+1	; 0x01
 114:	9a 81       	ldd	r25, Y+2	; 0x02
 116:	4d 81       	ldd	r20, Y+5	; 0x05
 118:	5e 81       	ldd	r21, Y+6	; 0x06
 11a:	84 0f       	add	r24, r20
 11c:	95 1f       	adc	r25, r21
 11e:	fc 01       	movw	r30, r24
 120:	90 81       	ld	r25, Z
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	99 36       	cpi	r25, 0x69	; 105
 126:	09 f0       	breq	.+2      	; 0x12a <__EEPROM_REGION_LENGTH__+0x2a>
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	88 2f       	mov	r24, r24
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	28 2b       	or	r18, r24
 130:	39 2b       	or	r19, r25
 132:	89 81       	ldd	r24, Y+1	; 0x01
 134:	9a 81       	ldd	r25, Y+2	; 0x02
 136:	4d 81       	ldd	r20, Y+5	; 0x05
 138:	5e 81       	ldd	r21, Y+6	; 0x06
 13a:	84 0f       	add	r24, r20
 13c:	95 1f       	adc	r25, r21
 13e:	fc 01       	movw	r30, r24
 140:	90 81       	ld	r25, Z
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	9f 36       	cpi	r25, 0x6F	; 111
 146:	09 f0       	breq	.+2      	; 0x14a <__EEPROM_REGION_LENGTH__+0x4a>
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	88 2f       	mov	r24, r24
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	28 2b       	or	r18, r24
 150:	39 2b       	or	r19, r25
 152:	89 81       	ldd	r24, Y+1	; 0x01
 154:	9a 81       	ldd	r25, Y+2	; 0x02
 156:	4d 81       	ldd	r20, Y+5	; 0x05
 158:	5e 81       	ldd	r21, Y+6	; 0x06
 15a:	84 0f       	add	r24, r20
 15c:	95 1f       	adc	r25, r21
 15e:	fc 01       	movw	r30, r24
 160:	90 81       	ld	r25, Z
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	95 37       	cpi	r25, 0x75	; 117
 166:	09 f0       	breq	.+2      	; 0x16a <__EEPROM_REGION_LENGTH__+0x6a>
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	88 2f       	mov	r24, r24
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	28 2b       	or	r18, r24
 170:	39 2b       	or	r19, r25
 172:	89 81       	ldd	r24, Y+1	; 0x01
 174:	9a 81       	ldd	r25, Y+2	; 0x02
 176:	4d 81       	ldd	r20, Y+5	; 0x05
 178:	5e 81       	ldd	r21, Y+6	; 0x06
 17a:	84 0f       	add	r24, r20
 17c:	95 1f       	adc	r25, r21
 17e:	fc 01       	movw	r30, r24
 180:	90 81       	ld	r25, Z
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	91 34       	cpi	r25, 0x41	; 65
 186:	09 f0       	breq	.+2      	; 0x18a <__EEPROM_REGION_LENGTH__+0x8a>
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	88 2f       	mov	r24, r24
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	28 2b       	or	r18, r24
 190:	39 2b       	or	r19, r25
 192:	89 81       	ldd	r24, Y+1	; 0x01
 194:	9a 81       	ldd	r25, Y+2	; 0x02
 196:	4d 81       	ldd	r20, Y+5	; 0x05
 198:	5e 81       	ldd	r21, Y+6	; 0x06
 19a:	84 0f       	add	r24, r20
 19c:	95 1f       	adc	r25, r21
 19e:	fc 01       	movw	r30, r24
 1a0:	90 81       	ld	r25, Z
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	95 34       	cpi	r25, 0x45	; 69
 1a6:	09 f0       	breq	.+2      	; 0x1aa <__EEPROM_REGION_LENGTH__+0xaa>
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	88 2f       	mov	r24, r24
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	28 2b       	or	r18, r24
 1b0:	39 2b       	or	r19, r25
 1b2:	89 81       	ldd	r24, Y+1	; 0x01
 1b4:	9a 81       	ldd	r25, Y+2	; 0x02
 1b6:	4d 81       	ldd	r20, Y+5	; 0x05
 1b8:	5e 81       	ldd	r21, Y+6	; 0x06
 1ba:	84 0f       	add	r24, r20
 1bc:	95 1f       	adc	r25, r21
 1be:	fc 01       	movw	r30, r24
 1c0:	90 81       	ld	r25, Z
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	99 34       	cpi	r25, 0x49	; 73
 1c6:	09 f0       	breq	.+2      	; 0x1ca <__EEPROM_REGION_LENGTH__+0xca>
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	88 2f       	mov	r24, r24
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	28 2b       	or	r18, r24
 1d0:	39 2b       	or	r19, r25
 1d2:	89 81       	ldd	r24, Y+1	; 0x01
 1d4:	9a 81       	ldd	r25, Y+2	; 0x02
 1d6:	4d 81       	ldd	r20, Y+5	; 0x05
 1d8:	5e 81       	ldd	r21, Y+6	; 0x06
 1da:	84 0f       	add	r24, r20
 1dc:	95 1f       	adc	r25, r21
 1de:	fc 01       	movw	r30, r24
 1e0:	90 81       	ld	r25, Z
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	9f 34       	cpi	r25, 0x4F	; 79
 1e6:	09 f0       	breq	.+2      	; 0x1ea <__EEPROM_REGION_LENGTH__+0xea>
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	88 2f       	mov	r24, r24
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	28 2b       	or	r18, r24
 1f0:	39 2b       	or	r19, r25
 1f2:	89 81       	ldd	r24, Y+1	; 0x01
 1f4:	9a 81       	ldd	r25, Y+2	; 0x02
 1f6:	4d 81       	ldd	r20, Y+5	; 0x05
 1f8:	5e 81       	ldd	r21, Y+6	; 0x06
 1fa:	84 0f       	add	r24, r20
 1fc:	95 1f       	adc	r25, r21
 1fe:	fc 01       	movw	r30, r24
 200:	90 81       	ld	r25, Z
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	95 35       	cpi	r25, 0x55	; 85
 206:	09 f0       	breq	.+2      	; 0x20a <__EEPROM_REGION_LENGTH__+0x10a>
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	88 2f       	mov	r24, r24
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	82 2b       	or	r24, r18
 210:	93 2b       	or	r25, r19
 212:	89 2b       	or	r24, r25
 214:	49 f0       	breq	.+18     	; 0x228 <__EEPROM_REGION_LENGTH__+0x128>
		vowel_count++;
 216:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
 21a:	90 91 01 28 	lds	r25, 0x2801	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
 21e:	01 96       	adiw	r24, 0x01	; 1
 220:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
 224:	90 93 01 28 	sts	0x2801, r25	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
extern int vowel_count=0;
void vowel(char* str)
{
	int l;
	l=strlen(str);
	for(int i=0;i<l;i++)
 228:	89 81       	ldd	r24, Y+1	; 0x01
 22a:	9a 81       	ldd	r25, Y+2	; 0x02
 22c:	01 96       	adiw	r24, 0x01	; 1
 22e:	89 83       	std	Y+1, r24	; 0x01
 230:	9a 83       	std	Y+2, r25	; 0x02
 232:	29 81       	ldd	r18, Y+1	; 0x01
 234:	3a 81       	ldd	r19, Y+2	; 0x02
 236:	8b 81       	ldd	r24, Y+3	; 0x03
 238:	9c 81       	ldd	r25, Y+4	; 0x04
 23a:	28 17       	cp	r18, r24
 23c:	39 07       	cpc	r19, r25
 23e:	0c f4       	brge	.+2      	; 0x242 <__EEPROM_REGION_LENGTH__+0x142>
 240:	4d cf       	rjmp	.-358    	; 0xdc <vowel+0x24>
	{
		if(str[i] == 'a' | str[i]=='e' | str[i]=='i' | str[i]=='o' | str[i]=='u' | str[i]=='A' | str[i]=='E' | str[i]=='I' | str[i]=='O' | str[i]=='U' )
		vowel_count++;
	}
 242:	00 00       	nop
 244:	26 96       	adiw	r28, 0x06	; 6
 246:	cd bf       	out	0x3d, r28	; 61
 248:	de bf       	out	0x3e, r29	; 62
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	08 95       	ret

00000250 <main>:

#include <avr/io.h>

void vowel(char*);
int main(void)
{
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
 254:	00 d0       	rcall	.+0      	; 0x256 <main+0x6>
 256:	cd b7       	in	r28, 0x3d	; 61
 258:	de b7       	in	r29, 0x3e	; 62
	char* c="MISSISSIPPI";
 25a:	8e e8       	ldi	r24, 0x8E	; 142
 25c:	92 e4       	ldi	r25, 0x42	; 66
 25e:	89 83       	std	Y+1, r24	; 0x01
 260:	9a 83       	std	Y+2, r25	; 0x02
	vowel(c);
 262:	89 81       	ldd	r24, Y+1	; 0x01
 264:	9a 81       	ldd	r25, Y+2	; 0x02
 266:	0e 94 5c 00 	call	0xb8	; 0xb8 <vowel>
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	90 e0       	ldi	r25, 0x00	; 0
	extern int vowel_count;
	
}
 26e:	0f 90       	pop	r0
 270:	0f 90       	pop	r0
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	08 95       	ret

00000278 <strlen>:
 278:	fc 01       	movw	r30, r24
 27a:	01 90       	ld	r0, Z+
 27c:	00 20       	and	r0, r0
 27e:	e9 f7       	brne	.-6      	; 0x27a <strlen+0x2>
 280:	80 95       	com	r24
 282:	90 95       	com	r25
 284:	8e 0f       	add	r24, r30
 286:	9f 1f       	adc	r25, r31
 288:	08 95       	ret

0000028a <_exit>:
 28a:	f8 94       	cli

0000028c <__stop_program>:
 28c:	ff cf       	rjmp	.-2      	; 0x28c <__stop_program>
