
q5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  000002ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000266  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002460  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000021e4  00000000  00000000  000027ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029a  00000000  00000000  000049d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00004c6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001031  00000000  00000000  00004d14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f2  00000000  00000000  00005d45  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00005e37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  74:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0e 94 1b 01 	call	0x236	; 0x236 <main>
  a0:	0c 94 31 01 	jmp	0x262	; 0x262 <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <func>:
 * Created: 31-07-2024 10:20:32
 *  Author: YADHU KRISHNA T
 */ 
int power(int,int);
int func(int a,int p,int n)
{
  a8:	0f 93       	push	r16
  aa:	1f 93       	push	r17
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	cd b7       	in	r28, 0x3d	; 61
  b2:	de b7       	in	r29, 0x3e	; 62
  b4:	cc 54       	subi	r28, 0x4C	; 76
  b6:	d1 09       	sbc	r29, r1
  b8:	cd bf       	out	0x3d, r28	; 61
  ba:	de bf       	out	0x3e, r29	; 62
  bc:	9e 01       	movw	r18, r28
  be:	29 5b       	subi	r18, 0xB9	; 185
  c0:	3f 4f       	sbci	r19, 0xFF	; 255
  c2:	f9 01       	movw	r30, r18
  c4:	80 83       	st	Z, r24
  c6:	91 83       	std	Z+1, r25	; 0x01
  c8:	ce 01       	movw	r24, r28
  ca:	87 5b       	subi	r24, 0xB7	; 183
  cc:	9f 4f       	sbci	r25, 0xFF	; 255
  ce:	fc 01       	movw	r30, r24
  d0:	60 83       	st	Z, r22
  d2:	71 83       	std	Z+1, r23	; 0x01
  d4:	ce 01       	movw	r24, r28
  d6:	85 5b       	subi	r24, 0xB5	; 181
  d8:	9f 4f       	sbci	r25, 0xFF	; 255
  da:	fc 01       	movw	r30, r24
  dc:	40 83       	st	Z, r20
  de:	51 83       	std	Z+1, r21	; 0x01
	int b[32];
	int j=0;
  e0:	19 82       	std	Y+1, r1	; 0x01
  e2:	1a 82       	std	Y+2, r1	; 0x02
	int dec=0;
  e4:	1b 82       	std	Y+3, r1	; 0x03
  e6:	1c 82       	std	Y+4, r1	; 0x04
	while(a>0)
  e8:	32 c0       	rjmp	.+100    	; 0x14e <__EEPROM_REGION_LENGTH__+0x4e>
	{
		b[j]=a%2;
  ea:	ce 01       	movw	r24, r28
  ec:	89 5b       	subi	r24, 0xB9	; 185
  ee:	9f 4f       	sbci	r25, 0xFF	; 255
  f0:	fc 01       	movw	r30, r24
  f2:	80 81       	ld	r24, Z
  f4:	91 81       	ldd	r25, Z+1	; 0x01
  f6:	81 70       	andi	r24, 0x01	; 1
  f8:	90 78       	andi	r25, 0x80	; 128
  fa:	99 23       	and	r25, r25
  fc:	24 f4       	brge	.+8      	; 0x106 <__EEPROM_REGION_LENGTH__+0x6>
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	8e 6f       	ori	r24, 0xFE	; 254
 102:	9f 6f       	ori	r25, 0xFF	; 255
 104:	01 96       	adiw	r24, 0x01	; 1
 106:	ac 01       	movw	r20, r24
 108:	89 81       	ldd	r24, Y+1	; 0x01
 10a:	9a 81       	ldd	r25, Y+2	; 0x02
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	9e 01       	movw	r18, r28
 112:	2f 5f       	subi	r18, 0xFF	; 255
 114:	3f 4f       	sbci	r19, 0xFF	; 255
 116:	82 0f       	add	r24, r18
 118:	93 1f       	adc	r25, r19
 11a:	06 96       	adiw	r24, 0x06	; 6
 11c:	fc 01       	movw	r30, r24
 11e:	40 83       	st	Z, r20
 120:	51 83       	std	Z+1, r21	; 0x01
		a=a/2;
 122:	9e 01       	movw	r18, r28
 124:	29 5b       	subi	r18, 0xB9	; 185
 126:	3f 4f       	sbci	r19, 0xFF	; 255
 128:	ce 01       	movw	r24, r28
 12a:	89 5b       	subi	r24, 0xB9	; 185
 12c:	9f 4f       	sbci	r25, 0xFF	; 255
 12e:	fc 01       	movw	r30, r24
 130:	80 81       	ld	r24, Z
 132:	91 81       	ldd	r25, Z+1	; 0x01
 134:	99 23       	and	r25, r25
 136:	0c f4       	brge	.+2      	; 0x13a <__EEPROM_REGION_LENGTH__+0x3a>
 138:	01 96       	adiw	r24, 0x01	; 1
 13a:	95 95       	asr	r25
 13c:	87 95       	ror	r24
 13e:	f9 01       	movw	r30, r18
 140:	80 83       	st	Z, r24
 142:	91 83       	std	Z+1, r25	; 0x01
		j++;
 144:	89 81       	ldd	r24, Y+1	; 0x01
 146:	9a 81       	ldd	r25, Y+2	; 0x02
 148:	01 96       	adiw	r24, 0x01	; 1
 14a:	89 83       	std	Y+1, r24	; 0x01
 14c:	9a 83       	std	Y+2, r25	; 0x02
int func(int a,int p,int n)
{
	int b[32];
	int j=0;
	int dec=0;
	while(a>0)
 14e:	ce 01       	movw	r24, r28
 150:	89 5b       	subi	r24, 0xB9	; 185
 152:	9f 4f       	sbci	r25, 0xFF	; 255
 154:	fc 01       	movw	r30, r24
 156:	80 81       	ld	r24, Z
 158:	91 81       	ldd	r25, Z+1	; 0x01
 15a:	18 16       	cp	r1, r24
 15c:	19 06       	cpc	r1, r25
 15e:	2c f2       	brlt	.-118    	; 0xea <func+0x42>
		b[j]=a%2;
		a=a/2;
		j++;
	}
	
	for(int i=0;i<n;i++)
 160:	1d 82       	std	Y+5, r1	; 0x05
 162:	1e 82       	std	Y+6, r1	; 0x06
 164:	27 c0       	rjmp	.+78     	; 0x1b4 <__EEPROM_REGION_LENGTH__+0xb4>
	{
		dec=dec+(b[i]*(power(2,i)));
 166:	8d 81       	ldd	r24, Y+5	; 0x05
 168:	9e 81       	ldd	r25, Y+6	; 0x06
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	9e 01       	movw	r18, r28
 170:	2f 5f       	subi	r18, 0xFF	; 255
 172:	3f 4f       	sbci	r19, 0xFF	; 255
 174:	82 0f       	add	r24, r18
 176:	93 1f       	adc	r25, r19
 178:	06 96       	adiw	r24, 0x06	; 6
 17a:	fc 01       	movw	r30, r24
 17c:	00 81       	ld	r16, Z
 17e:	11 81       	ldd	r17, Z+1	; 0x01
 180:	8d 81       	ldd	r24, Y+5	; 0x05
 182:	9e 81       	ldd	r25, Y+6	; 0x06
 184:	bc 01       	movw	r22, r24
 186:	82 e0       	ldi	r24, 0x02	; 2
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <power>
 18e:	9c 01       	movw	r18, r24
 190:	02 9f       	mul	r16, r18
 192:	c0 01       	movw	r24, r0
 194:	03 9f       	mul	r16, r19
 196:	90 0d       	add	r25, r0
 198:	12 9f       	mul	r17, r18
 19a:	90 0d       	add	r25, r0
 19c:	11 24       	eor	r1, r1
 19e:	2b 81       	ldd	r18, Y+3	; 0x03
 1a0:	3c 81       	ldd	r19, Y+4	; 0x04
 1a2:	82 0f       	add	r24, r18
 1a4:	93 1f       	adc	r25, r19
 1a6:	8b 83       	std	Y+3, r24	; 0x03
 1a8:	9c 83       	std	Y+4, r25	; 0x04
		b[j]=a%2;
		a=a/2;
		j++;
	}
	
	for(int i=0;i<n;i++)
 1aa:	8d 81       	ldd	r24, Y+5	; 0x05
 1ac:	9e 81       	ldd	r25, Y+6	; 0x06
 1ae:	01 96       	adiw	r24, 0x01	; 1
 1b0:	8d 83       	std	Y+5, r24	; 0x05
 1b2:	9e 83       	std	Y+6, r25	; 0x06
 1b4:	ce 01       	movw	r24, r28
 1b6:	85 5b       	subi	r24, 0xB5	; 181
 1b8:	9f 4f       	sbci	r25, 0xFF	; 255
 1ba:	2d 81       	ldd	r18, Y+5	; 0x05
 1bc:	3e 81       	ldd	r19, Y+6	; 0x06
 1be:	fc 01       	movw	r30, r24
 1c0:	80 81       	ld	r24, Z
 1c2:	91 81       	ldd	r25, Z+1	; 0x01
 1c4:	28 17       	cp	r18, r24
 1c6:	39 07       	cpc	r19, r25
 1c8:	74 f2       	brlt	.-100    	; 0x166 <__EEPROM_REGION_LENGTH__+0x66>
	{
		dec=dec+(b[i]*(power(2,i)));
	}
	return dec;
 1ca:	8b 81       	ldd	r24, Y+3	; 0x03
 1cc:	9c 81       	ldd	r25, Y+4	; 0x04
	 
	
 1ce:	c4 5b       	subi	r28, 0xB4	; 180
 1d0:	df 4f       	sbci	r29, 0xFF	; 255
 1d2:	cd bf       	out	0x3d, r28	; 61
 1d4:	de bf       	out	0x3e, r29	; 62
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	1f 91       	pop	r17
 1dc:	0f 91       	pop	r16
 1de:	08 95       	ret

000001e0 <power>:
 *
 * Created: 31-07-2024 16:19:56
 *  Author: YADHU KRISHNA T
 */ 
int power(int a,int b)
{
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	00 d0       	rcall	.+0      	; 0x1e6 <power+0x6>
 1e6:	00 d0       	rcall	.+0      	; 0x1e8 <power+0x8>
 1e8:	cd b7       	in	r28, 0x3d	; 61
 1ea:	de b7       	in	r29, 0x3e	; 62
 1ec:	89 83       	std	Y+1, r24	; 0x01
 1ee:	9a 83       	std	Y+2, r25	; 0x02
 1f0:	6b 83       	std	Y+3, r22	; 0x03
 1f2:	7c 83       	std	Y+4, r23	; 0x04
	if(b!=0)
 1f4:	8b 81       	ldd	r24, Y+3	; 0x03
 1f6:	9c 81       	ldd	r25, Y+4	; 0x04
 1f8:	89 2b       	or	r24, r25
 1fa:	a9 f0       	breq	.+42     	; 0x226 <power+0x46>
	return (a*power(a,b-1));
 1fc:	8b 81       	ldd	r24, Y+3	; 0x03
 1fe:	9c 81       	ldd	r25, Y+4	; 0x04
 200:	9c 01       	movw	r18, r24
 202:	21 50       	subi	r18, 0x01	; 1
 204:	31 09       	sbc	r19, r1
 206:	89 81       	ldd	r24, Y+1	; 0x01
 208:	9a 81       	ldd	r25, Y+2	; 0x02
 20a:	b9 01       	movw	r22, r18
 20c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <power>
 210:	ac 01       	movw	r20, r24
 212:	29 81       	ldd	r18, Y+1	; 0x01
 214:	3a 81       	ldd	r19, Y+2	; 0x02
 216:	42 9f       	mul	r20, r18
 218:	c0 01       	movw	r24, r0
 21a:	43 9f       	mul	r20, r19
 21c:	90 0d       	add	r25, r0
 21e:	52 9f       	mul	r21, r18
 220:	90 0d       	add	r25, r0
 222:	11 24       	eor	r1, r1
 224:	02 c0       	rjmp	.+4      	; 0x22a <power+0x4a>
	else
	return 1;
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	24 96       	adiw	r28, 0x04	; 4
 22c:	cd bf       	out	0x3d, r28	; 61
 22e:	de bf       	out	0x3e, r29	; 62
 230:	df 91       	pop	r29
 232:	cf 91       	pop	r28
 234:	08 95       	ret

00000236 <main>:

#include <avr/io.h>

int func(int,int,int);
int main(void)
{
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
 23a:	00 d0       	rcall	.+0      	; 0x23c <main+0x6>
 23c:	cd b7       	in	r28, 0x3d	; 61
 23e:	de b7       	in	r29, 0x3e	; 62
	int val;
    /* Replace with your application code */
	val=func(181,2,5);
 240:	45 e0       	ldi	r20, 0x05	; 5
 242:	50 e0       	ldi	r21, 0x00	; 0
 244:	62 e0       	ldi	r22, 0x02	; 2
 246:	70 e0       	ldi	r23, 0x00	; 0
 248:	85 eb       	ldi	r24, 0xB5	; 181
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 54 00 	call	0xa8	; 0xa8 <func>
 250:	89 83       	std	Y+1, r24	; 0x01
 252:	9a 83       	std	Y+2, r25	; 0x02
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	90 e0       	ldi	r25, 0x00	; 0
}
 258:	0f 90       	pop	r0
 25a:	0f 90       	pop	r0
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	08 95       	ret

00000262 <_exit>:
 262:	f8 94       	cli

00000264 <__stop_program>:
 264:	ff cf       	rjmp	.-2      	; 0x264 <__stop_program>
