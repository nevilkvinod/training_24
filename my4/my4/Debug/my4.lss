
my4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  0000024e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  000041b2  000001b2  00000246  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000002  00802800  00802800  0000024e  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  0000024e  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000040  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000023ea  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000021bc  00000000  00000000  000026ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000024d  00000000  00000000  000048a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000068  00000000  00000000  00004af4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000102a  00000000  00000000  00004b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000008f  00000000  00000000  00005b86  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000020  00000000  00000000  00005c15  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  6c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  70:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  74:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  78:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  7c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  80:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  84:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  88:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  8c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_clear_bss>:
  9c:	28 e2       	ldi	r18, 0x28	; 40
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b8 e2       	ldi	r27, 0x28	; 40
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
  a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
  a6:	a2 30       	cpi	r26, 0x02	; 2
  a8:	b2 07       	cpc	r27, r18
  aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
  ac:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  b0:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <main>:
#include <avr/io.h>
int vowels(char);
int vowel_count;

int main(void)
{
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	2a 97       	sbiw	r28, 0x0a	; 10
  c2:	cd bf       	out	0x3d, r28	; 61
  c4:	de bf       	out	0x3e, r29	; 62
	char rr[]={'a','d','i','t','h','y','a','\0'};
  c6:	88 e0       	ldi	r24, 0x08	; 8
  c8:	e2 eb       	ldi	r30, 0xB2	; 178
  ca:	f1 e4       	ldi	r31, 0x41	; 65
  cc:	de 01       	movw	r26, r28
  ce:	13 96       	adiw	r26, 0x03	; 3
  d0:	01 90       	ld	r0, Z+
  d2:	0d 92       	st	X+, r0
  d4:	8a 95       	dec	r24
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x18>
    int c =vowels(rr);
  d8:	ce 01       	movw	r24, r28
  da:	03 96       	adiw	r24, 0x03	; 3
  dc:	0e 94 7a 00 	call	0xf4	; 0xf4 <vowels>
  e0:	89 83       	std	Y+1, r24	; 0x01
  e2:	9a 83       	std	Y+2, r25	; 0x02
	return 0;
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	90 e0       	ldi	r25, 0x00	; 0
}
  e8:	2a 96       	adiw	r28, 0x0a	; 10
  ea:	cd bf       	out	0x3d, r28	; 61
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	08 95       	ret

000000f4 <vowels>:
 * Created: 31-07-2024 15:14:37
 *  Author: ADITHYA ANIL
 */ 
extern int vowel_count;
int vowels(char arr[])
{
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	00 d0       	rcall	.+0      	; 0xfa <vowels+0x6>
  fa:	00 d0       	rcall	.+0      	; 0xfc <vowels+0x8>
  fc:	cd b7       	in	r28, 0x3d	; 61
  fe:	de b7       	in	r29, 0x3e	; 62
 100:	8b 83       	std	Y+3, r24	; 0x03
 102:	9c 83       	std	Y+4, r25	; 0x04
	int i=0;
 104:	19 82       	std	Y+1, r1	; 0x01
 106:	1a 82       	std	Y+2, r1	; 0x02
	while(arr[i]!='\0'){
 108:	40 c0       	rjmp	.+128    	; 0x18a <__EEPROM_REGION_LENGTH__+0x8a>
		
		if(arr[i]=='a'||arr[i]=='e'||arr[i]=='i'||arr[i]=='o'||arr[i]=='u')
 10a:	89 81       	ldd	r24, Y+1	; 0x01
 10c:	9a 81       	ldd	r25, Y+2	; 0x02
 10e:	2b 81       	ldd	r18, Y+3	; 0x03
 110:	3c 81       	ldd	r19, Y+4	; 0x04
 112:	82 0f       	add	r24, r18
 114:	93 1f       	adc	r25, r19
 116:	fc 01       	movw	r30, r24
 118:	80 81       	ld	r24, Z
 11a:	81 36       	cpi	r24, 0x61	; 97
 11c:	41 f1       	breq	.+80     	; 0x16e <__EEPROM_REGION_LENGTH__+0x6e>
 11e:	89 81       	ldd	r24, Y+1	; 0x01
 120:	9a 81       	ldd	r25, Y+2	; 0x02
 122:	2b 81       	ldd	r18, Y+3	; 0x03
 124:	3c 81       	ldd	r19, Y+4	; 0x04
 126:	82 0f       	add	r24, r18
 128:	93 1f       	adc	r25, r19
 12a:	fc 01       	movw	r30, r24
 12c:	80 81       	ld	r24, Z
 12e:	85 36       	cpi	r24, 0x65	; 101
 130:	f1 f0       	breq	.+60     	; 0x16e <__EEPROM_REGION_LENGTH__+0x6e>
 132:	89 81       	ldd	r24, Y+1	; 0x01
 134:	9a 81       	ldd	r25, Y+2	; 0x02
 136:	2b 81       	ldd	r18, Y+3	; 0x03
 138:	3c 81       	ldd	r19, Y+4	; 0x04
 13a:	82 0f       	add	r24, r18
 13c:	93 1f       	adc	r25, r19
 13e:	fc 01       	movw	r30, r24
 140:	80 81       	ld	r24, Z
 142:	89 36       	cpi	r24, 0x69	; 105
 144:	a1 f0       	breq	.+40     	; 0x16e <__EEPROM_REGION_LENGTH__+0x6e>
 146:	89 81       	ldd	r24, Y+1	; 0x01
 148:	9a 81       	ldd	r25, Y+2	; 0x02
 14a:	2b 81       	ldd	r18, Y+3	; 0x03
 14c:	3c 81       	ldd	r19, Y+4	; 0x04
 14e:	82 0f       	add	r24, r18
 150:	93 1f       	adc	r25, r19
 152:	fc 01       	movw	r30, r24
 154:	80 81       	ld	r24, Z
 156:	8f 36       	cpi	r24, 0x6F	; 111
 158:	51 f0       	breq	.+20     	; 0x16e <__EEPROM_REGION_LENGTH__+0x6e>
 15a:	89 81       	ldd	r24, Y+1	; 0x01
 15c:	9a 81       	ldd	r25, Y+2	; 0x02
 15e:	2b 81       	ldd	r18, Y+3	; 0x03
 160:	3c 81       	ldd	r19, Y+4	; 0x04
 162:	82 0f       	add	r24, r18
 164:	93 1f       	adc	r25, r19
 166:	fc 01       	movw	r30, r24
 168:	80 81       	ld	r24, Z
 16a:	85 37       	cpi	r24, 0x75	; 117
 16c:	49 f4       	brne	.+18     	; 0x180 <__EEPROM_REGION_LENGTH__+0x80>
		++vowel_count;
 16e:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
 172:	90 91 01 28 	lds	r25, 0x2801	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
 176:	01 96       	adiw	r24, 0x01	; 1
 178:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
 17c:	90 93 01 28 	sts	0x2801, r25	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
		i++;
 180:	89 81       	ldd	r24, Y+1	; 0x01
 182:	9a 81       	ldd	r25, Y+2	; 0x02
 184:	01 96       	adiw	r24, 0x01	; 1
 186:	89 83       	std	Y+1, r24	; 0x01
 188:	9a 83       	std	Y+2, r25	; 0x02
 */ 
extern int vowel_count;
int vowels(char arr[])
{
	int i=0;
	while(arr[i]!='\0'){
 18a:	89 81       	ldd	r24, Y+1	; 0x01
 18c:	9a 81       	ldd	r25, Y+2	; 0x02
 18e:	2b 81       	ldd	r18, Y+3	; 0x03
 190:	3c 81       	ldd	r19, Y+4	; 0x04
 192:	82 0f       	add	r24, r18
 194:	93 1f       	adc	r25, r19
 196:	fc 01       	movw	r30, r24
 198:	80 81       	ld	r24, Z
 19a:	88 23       	and	r24, r24
 19c:	09 f0       	breq	.+2      	; 0x1a0 <__EEPROM_REGION_LENGTH__+0xa0>
 19e:	b5 cf       	rjmp	.-150    	; 0x10a <__EEPROM_REGION_LENGTH__+0xa>
		++vowel_count;
		i++;

	}
	
 1a0:	00 00       	nop
 1a2:	24 96       	adiw	r28, 0x04	; 4
 1a4:	cd bf       	out	0x3d, r28	; 61
 1a6:	de bf       	out	0x3e, r29	; 62
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <_exit>:
 1ae:	f8 94       	cli

000001b0 <__stop_program>:
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <__stop_program>
