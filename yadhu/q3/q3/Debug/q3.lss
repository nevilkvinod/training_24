
q3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  000001fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000a  0000417e  0000017e  000001f2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000030  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023f4  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000021a5  00000000  00000000  000026a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000245  00000000  00000000  00004845  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  00004a8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001024  00000000  00000000  00004af4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000008e  00000000  00000000  00005b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00005ba6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  74:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0e 94 96 00 	call	0x12c	; 0x12c <main>
  a0:	0c 94 bd 00 	jmp	0x17a	; 0x17a <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <search>:
 *
 * Created: 31-07-2024 09:22:11
 *  Author: YADHU KRISHNA T
 */ 
int search(int* arr,int n,int k)
{
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
  b0:	2a 97       	sbiw	r28, 0x0a	; 10
  b2:	cd bf       	out	0x3d, r28	; 61
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	8d 83       	std	Y+5, r24	; 0x05
  b8:	9e 83       	std	Y+6, r25	; 0x06
  ba:	6f 83       	std	Y+7, r22	; 0x07
  bc:	78 87       	std	Y+8, r23	; 0x08
  be:	49 87       	std	Y+9, r20	; 0x09
  c0:	5a 87       	std	Y+10, r21	; 0x0a
	int flag =0;
  c2:	1b 82       	std	Y+3, r1	; 0x03
  c4:	1c 82       	std	Y+4, r1	; 0x04
	for(int i=0;i<n;i++)
  c6:	19 82       	std	Y+1, r1	; 0x01
  c8:	1a 82       	std	Y+2, r1	; 0x02
  ca:	1c c0       	rjmp	.+56     	; 0x104 <__EEPROM_REGION_LENGTH__+0x4>
	{
		if(*(arr+i)==k)
  cc:	89 81       	ldd	r24, Y+1	; 0x01
  ce:	9a 81       	ldd	r25, Y+2	; 0x02
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	2d 81       	ldd	r18, Y+5	; 0x05
  d6:	3e 81       	ldd	r19, Y+6	; 0x06
  d8:	82 0f       	add	r24, r18
  da:	93 1f       	adc	r25, r19
  dc:	fc 01       	movw	r30, r24
  de:	20 81       	ld	r18, Z
  e0:	31 81       	ldd	r19, Z+1	; 0x01
  e2:	89 85       	ldd	r24, Y+9	; 0x09
  e4:	9a 85       	ldd	r25, Y+10	; 0x0a
  e6:	28 17       	cp	r18, r24
  e8:	39 07       	cpc	r19, r25
  ea:	39 f4       	brne	.+14     	; 0xfa <search+0x52>
		{
		flag=1;
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	8b 83       	std	Y+3, r24	; 0x03
  f2:	9c 83       	std	Y+4, r25	; 0x04
		return i;
  f4:	89 81       	ldd	r24, Y+1	; 0x01
  f6:	9a 81       	ldd	r25, Y+2	; 0x02
  f8:	13 c0       	rjmp	.+38     	; 0x120 <__EEPROM_REGION_LENGTH__+0x20>
 *  Author: YADHU KRISHNA T
 */ 
int search(int* arr,int n,int k)
{
	int flag =0;
	for(int i=0;i<n;i++)
  fa:	89 81       	ldd	r24, Y+1	; 0x01
  fc:	9a 81       	ldd	r25, Y+2	; 0x02
  fe:	01 96       	adiw	r24, 0x01	; 1
 100:	89 83       	std	Y+1, r24	; 0x01
 102:	9a 83       	std	Y+2, r25	; 0x02
 104:	29 81       	ldd	r18, Y+1	; 0x01
 106:	3a 81       	ldd	r19, Y+2	; 0x02
 108:	8f 81       	ldd	r24, Y+7	; 0x07
 10a:	98 85       	ldd	r25, Y+8	; 0x08
 10c:	28 17       	cp	r18, r24
 10e:	39 07       	cpc	r19, r25
 110:	ec f2       	brlt	.-70     	; 0xcc <search+0x24>
		{
		flag=1;
		return i;
		break;
		}}
	if(flag==0)
 112:	8b 81       	ldd	r24, Y+3	; 0x03
 114:	9c 81       	ldd	r25, Y+4	; 0x04
 116:	89 2b       	or	r24, r25
 118:	19 f4       	brne	.+6      	; 0x120 <__EEPROM_REGION_LENGTH__+0x20>
	return -1;
 11a:	8f ef       	ldi	r24, 0xFF	; 255
 11c:	9f ef       	ldi	r25, 0xFF	; 255
 11e:	00 c0       	rjmp	.+0      	; 0x120 <__EEPROM_REGION_LENGTH__+0x20>
 120:	2a 96       	adiw	r28, 0x0a	; 10
 122:	cd bf       	out	0x3d, r28	; 61
 124:	de bf       	out	0x3e, r29	; 62
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	08 95       	ret

0000012c <main>:

#include <avr/io.h>

int search(int,int,int);
int main(void)
{
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	cd b7       	in	r28, 0x3d	; 61
 132:	de b7       	in	r29, 0x3e	; 62
 134:	2e 97       	sbiw	r28, 0x0e	; 14
 136:	cd bf       	out	0x3d, r28	; 61
 138:	de bf       	out	0x3e, r29	; 62
	int m;
	int n=5;
 13a:	85 e0       	ldi	r24, 0x05	; 5
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	89 83       	std	Y+1, r24	; 0x01
 140:	9a 83       	std	Y+2, r25	; 0x02
	int a[5]={2,5,3,1,7};
 142:	8a e0       	ldi	r24, 0x0A	; 10
 144:	ee e7       	ldi	r30, 0x7E	; 126
 146:	f1 e4       	ldi	r31, 0x41	; 65
 148:	de 01       	movw	r26, r28
 14a:	15 96       	adiw	r26, 0x05	; 5
 14c:	01 90       	ld	r0, Z+
 14e:	0d 92       	st	X+, r0
 150:	8a 95       	dec	r24
 152:	e1 f7       	brne	.-8      	; 0x14c <main+0x20>
	m=search(a,n,3);
 154:	ce 01       	movw	r24, r28
 156:	05 96       	adiw	r24, 0x05	; 5
 158:	29 81       	ldd	r18, Y+1	; 0x01
 15a:	3a 81       	ldd	r19, Y+2	; 0x02
 15c:	43 e0       	ldi	r20, 0x03	; 3
 15e:	50 e0       	ldi	r21, 0x00	; 0
 160:	b9 01       	movw	r22, r18
 162:	0e 94 54 00 	call	0xa8	; 0xa8 <search>
 166:	8b 83       	std	Y+3, r24	; 0x03
 168:	9c 83       	std	Y+4, r25	; 0x04
	return 0;
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	90 e0       	ldi	r25, 0x00	; 0
   
}
 16e:	2e 96       	adiw	r28, 0x0e	; 14
 170:	cd bf       	out	0x3d, r28	; 61
 172:	de bf       	out	0x3e, r29	; 62
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	08 95       	ret

0000017a <_exit>:
 17a:	f8 94       	cli

0000017c <__stop_program>:
 17c:	ff cf       	rjmp	.-2      	; 0x17c <__stop_program>
