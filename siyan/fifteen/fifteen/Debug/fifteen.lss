
fifteen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00802800  0000021a  000002ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000210  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000a  00004210  00000210  000002a4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000030  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002408  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000021b8  00000000  00000000  00002768  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000271  00000000  00000000  00004920  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  00004b94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001031  00000000  00000000  00004bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000008e  00000000  00000000  00005c2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00005cbb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  8c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_copy_data>:
  9c:	18 e2       	ldi	r17, 0x28	; 40
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b8 e2       	ldi	r27, 0x28	; 40
  a2:	ea e1       	ldi	r30, 0x1A	; 26
  a4:	f2 e0       	ldi	r31, 0x02	; 2
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
  a8:	05 90       	lpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>
  b2:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  b6:	0c 94 06 01 	jmp	0x20c	; 0x20c <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <main>:
#include <avr/io.h>
int sort(int);
int max_min=1;

int main(void)
{
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
  c6:	2c 97       	sbiw	r28, 0x0c	; 12
  c8:	cd bf       	out	0x3d, r28	; 61
  ca:	de bf       	out	0x3e, r29	; 62
    int arr[5]={1,2,97,4,5};
  cc:	8a e0       	ldi	r24, 0x0A	; 10
  ce:	e0 e1       	ldi	r30, 0x10	; 16
  d0:	f2 e4       	ldi	r31, 0x42	; 66
  d2:	de 01       	movw	r26, r28
  d4:	13 96       	adiw	r26, 0x03	; 3
  d6:	01 90       	ld	r0, Z+
  d8:	0d 92       	st	X+, r0
  da:	8a 95       	dec	r24
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x18>
	sort(arr);
  de:	ce 01       	movw	r24, r28
  e0:	03 96       	adiw	r24, 0x03	; 3
  e2:	0e 94 88 00 	call	0x110	; 0x110 <sort>
	int b = max_min ? arr[4] : arr[0];
  e6:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
  ea:	90 91 01 28 	lds	r25, 0x2801	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
  ee:	89 2b       	or	r24, r25
  f0:	19 f0       	breq	.+6      	; 0xf8 <main+0x3a>
  f2:	8b 85       	ldd	r24, Y+11	; 0x0b
  f4:	9c 85       	ldd	r25, Y+12	; 0x0c
  f6:	02 c0       	rjmp	.+4      	; 0xfc <main+0x3e>
  f8:	8b 81       	ldd	r24, Y+3	; 0x03
  fa:	9c 81       	ldd	r25, Y+4	; 0x04
  fc:	89 83       	std	Y+1, r24	; 0x01
  fe:	9a 83       	std	Y+2, r25	; 0x02
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	90 e0       	ldi	r25, 0x00	; 0
}
 104:	2c 96       	adiw	r28, 0x0c	; 12
 106:	cd bf       	out	0x3d, r28	; 61
 108:	de bf       	out	0x3e, r29	; 62
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <sort>:
 * sort.c
 *
 * Created: 31-07-2024 10:58:10
 *  Author: Siyan Ananth A
 */ 
int sort(int *arr){
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	cd b7       	in	r28, 0x3d	; 61
 116:	de b7       	in	r29, 0x3e	; 62
 118:	28 97       	sbiw	r28, 0x08	; 8
 11a:	cd bf       	out	0x3d, r28	; 61
 11c:	de bf       	out	0x3e, r29	; 62
 11e:	8f 83       	std	Y+7, r24	; 0x07
 120:	98 87       	std	Y+8, r25	; 0x08
	for(int i=0;i<5;i++){
 122:	19 82       	std	Y+1, r1	; 0x01
 124:	1a 82       	std	Y+2, r1	; 0x02
 126:	66 c0       	rjmp	.+204    	; 0x1f4 <sort+0xe4>
		for(int j=0;j<5-i-1;j++){
 128:	1b 82       	std	Y+3, r1	; 0x03
 12a:	1c 82       	std	Y+4, r1	; 0x04
 12c:	52 c0       	rjmp	.+164    	; 0x1d2 <sort+0xc2>
			if(arr[j]>arr[j+1]){
 12e:	8b 81       	ldd	r24, Y+3	; 0x03
 130:	9c 81       	ldd	r25, Y+4	; 0x04
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	2f 81       	ldd	r18, Y+7	; 0x07
 138:	38 85       	ldd	r19, Y+8	; 0x08
 13a:	82 0f       	add	r24, r18
 13c:	93 1f       	adc	r25, r19
 13e:	fc 01       	movw	r30, r24
 140:	20 81       	ld	r18, Z
 142:	31 81       	ldd	r19, Z+1	; 0x01
 144:	8b 81       	ldd	r24, Y+3	; 0x03
 146:	9c 81       	ldd	r25, Y+4	; 0x04
 148:	01 96       	adiw	r24, 0x01	; 1
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	4f 81       	ldd	r20, Y+7	; 0x07
 150:	58 85       	ldd	r21, Y+8	; 0x08
 152:	84 0f       	add	r24, r20
 154:	95 1f       	adc	r25, r21
 156:	fc 01       	movw	r30, r24
 158:	80 81       	ld	r24, Z
 15a:	91 81       	ldd	r25, Z+1	; 0x01
 15c:	82 17       	cp	r24, r18
 15e:	93 07       	cpc	r25, r19
 160:	9c f5       	brge	.+102    	; 0x1c8 <sort+0xb8>
				int temp = arr[j];
 162:	8b 81       	ldd	r24, Y+3	; 0x03
 164:	9c 81       	ldd	r25, Y+4	; 0x04
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	2f 81       	ldd	r18, Y+7	; 0x07
 16c:	38 85       	ldd	r19, Y+8	; 0x08
 16e:	82 0f       	add	r24, r18
 170:	93 1f       	adc	r25, r19
 172:	fc 01       	movw	r30, r24
 174:	80 81       	ld	r24, Z
 176:	91 81       	ldd	r25, Z+1	; 0x01
 178:	8d 83       	std	Y+5, r24	; 0x05
 17a:	9e 83       	std	Y+6, r25	; 0x06
				arr[j]=arr[j+1];
 17c:	8b 81       	ldd	r24, Y+3	; 0x03
 17e:	9c 81       	ldd	r25, Y+4	; 0x04
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	2f 81       	ldd	r18, Y+7	; 0x07
 186:	38 85       	ldd	r19, Y+8	; 0x08
 188:	82 0f       	add	r24, r18
 18a:	93 1f       	adc	r25, r19
 18c:	2b 81       	ldd	r18, Y+3	; 0x03
 18e:	3c 81       	ldd	r19, Y+4	; 0x04
 190:	2f 5f       	subi	r18, 0xFF	; 255
 192:	3f 4f       	sbci	r19, 0xFF	; 255
 194:	22 0f       	add	r18, r18
 196:	33 1f       	adc	r19, r19
 198:	4f 81       	ldd	r20, Y+7	; 0x07
 19a:	58 85       	ldd	r21, Y+8	; 0x08
 19c:	24 0f       	add	r18, r20
 19e:	35 1f       	adc	r19, r21
 1a0:	f9 01       	movw	r30, r18
 1a2:	20 81       	ld	r18, Z
 1a4:	31 81       	ldd	r19, Z+1	; 0x01
 1a6:	fc 01       	movw	r30, r24
 1a8:	20 83       	st	Z, r18
 1aa:	31 83       	std	Z+1, r19	; 0x01
				arr[j+1]=temp;
 1ac:	8b 81       	ldd	r24, Y+3	; 0x03
 1ae:	9c 81       	ldd	r25, Y+4	; 0x04
 1b0:	01 96       	adiw	r24, 0x01	; 1
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	2f 81       	ldd	r18, Y+7	; 0x07
 1b8:	38 85       	ldd	r19, Y+8	; 0x08
 1ba:	82 0f       	add	r24, r18
 1bc:	93 1f       	adc	r25, r19
 1be:	2d 81       	ldd	r18, Y+5	; 0x05
 1c0:	3e 81       	ldd	r19, Y+6	; 0x06
 1c2:	fc 01       	movw	r30, r24
 1c4:	20 83       	st	Z, r18
 1c6:	31 83       	std	Z+1, r19	; 0x01
 * Created: 31-07-2024 10:58:10
 *  Author: Siyan Ananth A
 */ 
int sort(int *arr){
	for(int i=0;i<5;i++){
		for(int j=0;j<5-i-1;j++){
 1c8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ca:	9c 81       	ldd	r25, Y+4	; 0x04
 1cc:	01 96       	adiw	r24, 0x01	; 1
 1ce:	8b 83       	std	Y+3, r24	; 0x03
 1d0:	9c 83       	std	Y+4, r25	; 0x04
 1d2:	24 e0       	ldi	r18, 0x04	; 4
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	89 81       	ldd	r24, Y+1	; 0x01
 1d8:	9a 81       	ldd	r25, Y+2	; 0x02
 1da:	28 1b       	sub	r18, r24
 1dc:	39 0b       	sbc	r19, r25
 1de:	8b 81       	ldd	r24, Y+3	; 0x03
 1e0:	9c 81       	ldd	r25, Y+4	; 0x04
 1e2:	82 17       	cp	r24, r18
 1e4:	93 07       	cpc	r25, r19
 1e6:	0c f4       	brge	.+2      	; 0x1ea <sort+0xda>
 1e8:	a2 cf       	rjmp	.-188    	; 0x12e <sort+0x1e>
 *
 * Created: 31-07-2024 10:58:10
 *  Author: Siyan Ananth A
 */ 
int sort(int *arr){
	for(int i=0;i<5;i++){
 1ea:	89 81       	ldd	r24, Y+1	; 0x01
 1ec:	9a 81       	ldd	r25, Y+2	; 0x02
 1ee:	01 96       	adiw	r24, 0x01	; 1
 1f0:	89 83       	std	Y+1, r24	; 0x01
 1f2:	9a 83       	std	Y+2, r25	; 0x02
 1f4:	89 81       	ldd	r24, Y+1	; 0x01
 1f6:	9a 81       	ldd	r25, Y+2	; 0x02
 1f8:	05 97       	sbiw	r24, 0x05	; 5
 1fa:	0c f4       	brge	.+2      	; 0x1fe <sort+0xee>
 1fc:	95 cf       	rjmp	.-214    	; 0x128 <sort+0x18>
				arr[j]=arr[j+1];
				arr[j+1]=temp;
			}
		}
	}
 1fe:	00 00       	nop
 200:	28 96       	adiw	r28, 0x08	; 8
 202:	cd bf       	out	0x3d, r28	; 61
 204:	de bf       	out	0x3e, r29	; 62
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <_exit>:
 20c:	f8 94       	cli

0000020e <__stop_program>:
 20e:	ff cf       	rjmp	.-2      	; 0x20e <__stop_program>
