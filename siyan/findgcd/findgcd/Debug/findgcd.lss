
findgcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  00000218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000023ea  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000218a  00000000  00000000  000026b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000023c  00000000  00000000  0000483c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00004a78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000102b  00000000  00000000  00004ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008e  00000000  00000000  00005b0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00005b99  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  74:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0e 94 98 00 	call	0x130	; 0x130 <main>
  a0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <gcd>:
 *
 * Created: 03-08-2024 11:48:15
 *  Author: Siyan Ananth A
 */ 

int gcd(int a,int b){
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
  b0:	2c 97       	sbiw	r28, 0x0c	; 12
  b2:	cd bf       	out	0x3d, r28	; 61
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	89 87       	std	Y+9, r24	; 0x09
  b8:	9a 87       	std	Y+10, r25	; 0x0a
  ba:	6b 87       	std	Y+11, r22	; 0x0b
  bc:	7c 87       	std	Y+12, r23	; 0x0c
	int c = a>b ? a : b;
  be:	29 85       	ldd	r18, Y+9	; 0x09
  c0:	3a 85       	ldd	r19, Y+10	; 0x0a
  c2:	8b 85       	ldd	r24, Y+11	; 0x0b
  c4:	9c 85       	ldd	r25, Y+12	; 0x0c
  c6:	82 17       	cp	r24, r18
  c8:	93 07       	cpc	r25, r19
  ca:	0c f4       	brge	.+2      	; 0xce <gcd+0x26>
  cc:	c9 01       	movw	r24, r18
  ce:	8d 83       	std	Y+5, r24	; 0x05
  d0:	9e 83       	std	Y+6, r25	; 0x06
	int product,temp=0;
  d2:	1f 82       	std	Y+7, r1	; 0x07
  d4:	18 86       	std	Y+8, r1	; 0x08
	for(int i=0;i<c;i++){
  d6:	1b 82       	std	Y+3, r1	; 0x03
  d8:	1c 82       	std	Y+4, r1	; 0x04
  da:	1b c0       	rjmp	.+54     	; 0x112 <__EEPROM_REGION_LENGTH__+0x12>
		if(a%i==0 && b%i==0){
  dc:	89 85       	ldd	r24, Y+9	; 0x09
  de:	9a 85       	ldd	r25, Y+10	; 0x0a
  e0:	2b 81       	ldd	r18, Y+3	; 0x03
  e2:	3c 81       	ldd	r19, Y+4	; 0x04
  e4:	b9 01       	movw	r22, r18
  e6:	0e 94 b8 00 	call	0x170	; 0x170 <__divmodhi4>
  ea:	89 2b       	or	r24, r25
  ec:	69 f4       	brne	.+26     	; 0x108 <__EEPROM_REGION_LENGTH__+0x8>
  ee:	8b 85       	ldd	r24, Y+11	; 0x0b
  f0:	9c 85       	ldd	r25, Y+12	; 0x0c
  f2:	2b 81       	ldd	r18, Y+3	; 0x03
  f4:	3c 81       	ldd	r19, Y+4	; 0x04
  f6:	b9 01       	movw	r22, r18
  f8:	0e 94 b8 00 	call	0x170	; 0x170 <__divmodhi4>
  fc:	89 2b       	or	r24, r25
  fe:	21 f4       	brne	.+8      	; 0x108 <__EEPROM_REGION_LENGTH__+0x8>
			product=i;
 100:	8b 81       	ldd	r24, Y+3	; 0x03
 102:	9c 81       	ldd	r25, Y+4	; 0x04
 104:	89 83       	std	Y+1, r24	; 0x01
 106:	9a 83       	std	Y+2, r25	; 0x02
 */ 

int gcd(int a,int b){
	int c = a>b ? a : b;
	int product,temp=0;
	for(int i=0;i<c;i++){
 108:	8b 81       	ldd	r24, Y+3	; 0x03
 10a:	9c 81       	ldd	r25, Y+4	; 0x04
 10c:	01 96       	adiw	r24, 0x01	; 1
 10e:	8b 83       	std	Y+3, r24	; 0x03
 110:	9c 83       	std	Y+4, r25	; 0x04
 112:	2b 81       	ldd	r18, Y+3	; 0x03
 114:	3c 81       	ldd	r19, Y+4	; 0x04
 116:	8d 81       	ldd	r24, Y+5	; 0x05
 118:	9e 81       	ldd	r25, Y+6	; 0x06
 11a:	28 17       	cp	r18, r24
 11c:	39 07       	cpc	r19, r25
 11e:	f4 f2       	brlt	.-68     	; 0xdc <gcd+0x34>
		if(a%i==0 && b%i==0){
			product=i;
		}
	}
	
	return product;
 120:	89 81       	ldd	r24, Y+1	; 0x01
 122:	9a 81       	ldd	r25, Y+2	; 0x02
 124:	2c 96       	adiw	r28, 0x0c	; 12
 126:	cd bf       	out	0x3d, r28	; 61
 128:	de bf       	out	0x3e, r29	; 62
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <main>:
#include <avr/io.h>

int gcd(int ,int);

int main(void)
{
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	cd b7       	in	r28, 0x3d	; 61
 136:	de b7       	in	r29, 0x3e	; 62
 138:	26 97       	sbiw	r28, 0x06	; 6
 13a:	cd bf       	out	0x3d, r28	; 61
 13c:	de bf       	out	0x3e, r29	; 62
    int a=20,b=100;
 13e:	84 e1       	ldi	r24, 0x14	; 20
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	89 83       	std	Y+1, r24	; 0x01
 144:	9a 83       	std	Y+2, r25	; 0x02
 146:	84 e6       	ldi	r24, 0x64	; 100
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	8b 83       	std	Y+3, r24	; 0x03
 14c:	9c 83       	std	Y+4, r25	; 0x04
	int c=gcd(a,b);
 14e:	2b 81       	ldd	r18, Y+3	; 0x03
 150:	3c 81       	ldd	r19, Y+4	; 0x04
 152:	89 81       	ldd	r24, Y+1	; 0x01
 154:	9a 81       	ldd	r25, Y+2	; 0x02
 156:	b9 01       	movw	r22, r18
 158:	0e 94 54 00 	call	0xa8	; 0xa8 <gcd>
 15c:	8d 83       	std	Y+5, r24	; 0x05
 15e:	9e 83       	std	Y+6, r25	; 0x06
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	90 e0       	ldi	r25, 0x00	; 0
}
 164:	26 96       	adiw	r28, 0x06	; 6
 166:	cd bf       	out	0x3d, r28	; 61
 168:	de bf       	out	0x3e, r29	; 62
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <__divmodhi4>:
 170:	97 fb       	bst	r25, 7
 172:	07 2e       	mov	r0, r23
 174:	16 f4       	brtc	.+4      	; 0x17a <__divmodhi4+0xa>
 176:	00 94       	com	r0
 178:	07 d0       	rcall	.+14     	; 0x188 <__divmodhi4_neg1>
 17a:	77 fd       	sbrc	r23, 7
 17c:	09 d0       	rcall	.+18     	; 0x190 <__divmodhi4_neg2>
 17e:	0e 94 cc 00 	call	0x198	; 0x198 <__udivmodhi4>
 182:	07 fc       	sbrc	r0, 7
 184:	05 d0       	rcall	.+10     	; 0x190 <__divmodhi4_neg2>
 186:	3e f4       	brtc	.+14     	; 0x196 <__divmodhi4_exit>

00000188 <__divmodhi4_neg1>:
 188:	90 95       	com	r25
 18a:	81 95       	neg	r24
 18c:	9f 4f       	sbci	r25, 0xFF	; 255
 18e:	08 95       	ret

00000190 <__divmodhi4_neg2>:
 190:	70 95       	com	r23
 192:	61 95       	neg	r22
 194:	7f 4f       	sbci	r23, 0xFF	; 255

00000196 <__divmodhi4_exit>:
 196:	08 95       	ret

00000198 <__udivmodhi4>:
 198:	aa 1b       	sub	r26, r26
 19a:	bb 1b       	sub	r27, r27
 19c:	51 e1       	ldi	r21, 0x11	; 17
 19e:	07 c0       	rjmp	.+14     	; 0x1ae <__udivmodhi4_ep>

000001a0 <__udivmodhi4_loop>:
 1a0:	aa 1f       	adc	r26, r26
 1a2:	bb 1f       	adc	r27, r27
 1a4:	a6 17       	cp	r26, r22
 1a6:	b7 07       	cpc	r27, r23
 1a8:	10 f0       	brcs	.+4      	; 0x1ae <__udivmodhi4_ep>
 1aa:	a6 1b       	sub	r26, r22
 1ac:	b7 0b       	sbc	r27, r23

000001ae <__udivmodhi4_ep>:
 1ae:	88 1f       	adc	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	5a 95       	dec	r21
 1b4:	a9 f7       	brne	.-22     	; 0x1a0 <__udivmodhi4_loop>
 1b6:	80 95       	com	r24
 1b8:	90 95       	com	r25
 1ba:	bc 01       	movw	r22, r24
 1bc:	cd 01       	movw	r24, r26
 1be:	08 95       	ret

000001c0 <_exit>:
 1c0:	f8 94       	cli

000001c2 <__stop_program>:
 1c2:	ff cf       	rjmp	.-2      	; 0x1c2 <__stop_program>
